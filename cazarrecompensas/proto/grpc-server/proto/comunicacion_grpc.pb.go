// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: comunicacion.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Comunicacion_ConsultarListaPiratas_FullMethodName = "/comunicacion.Comunicacion/consultarListaPiratas"
	Comunicacion_VenderPirataSubmundo_FullMethodName  = "/comunicacion.Comunicacion/venderPirataSubmundo"
	Comunicacion_VenderPirataMarina_FullMethodName    = "/comunicacion.Comunicacion/venderPirataMarina"
)

// ComunicacionClient is the client API for Comunicacion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Servicio principal que define las operaciones disponibles
type ComunicacionClient interface {
	ConsultarListaPiratas(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Respuesta, error)
	VenderPirataSubmundo(ctx context.Context, in *VentaRequest, opts ...grpc.CallOption) (*VentaResponse, error)
	VenderPirataMarina(ctx context.Context, in *VentaRequest, opts ...grpc.CallOption) (*VentaResponse, error)
}

type comunicacionClient struct {
	cc grpc.ClientConnInterface
}

func NewComunicacionClient(cc grpc.ClientConnInterface) ComunicacionClient {
	return &comunicacionClient{cc}
}

func (c *comunicacionClient) ConsultarListaPiratas(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Respuesta, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, Comunicacion_ConsultarListaPiratas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacionClient) VenderPirataSubmundo(ctx context.Context, in *VentaRequest, opts ...grpc.CallOption) (*VentaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VentaResponse)
	err := c.cc.Invoke(ctx, Comunicacion_VenderPirataSubmundo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *comunicacionClient) VenderPirataMarina(ctx context.Context, in *VentaRequest, opts ...grpc.CallOption) (*VentaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VentaResponse)
	err := c.cc.Invoke(ctx, Comunicacion_VenderPirataMarina_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ComunicacionServer is the server API for Comunicacion service.
// All implementations must embed UnimplementedComunicacionServer
// for forward compatibility.
//
// Servicio principal que define las operaciones disponibles
type ComunicacionServer interface {
	ConsultarListaPiratas(context.Context, *Empty) (*Respuesta, error)
	VenderPirataSubmundo(context.Context, *VentaRequest) (*VentaResponse, error)
	VenderPirataMarina(context.Context, *VentaRequest) (*VentaResponse, error)
	mustEmbedUnimplementedComunicacionServer()
}

// UnimplementedComunicacionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedComunicacionServer struct{}

func (UnimplementedComunicacionServer) ConsultarListaPiratas(context.Context, *Empty) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarListaPiratas not implemented")
}
func (UnimplementedComunicacionServer) VenderPirataSubmundo(context.Context, *VentaRequest) (*VentaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VenderPirataSubmundo not implemented")
}
func (UnimplementedComunicacionServer) VenderPirataMarina(context.Context, *VentaRequest) (*VentaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VenderPirataMarina not implemented")
}
func (UnimplementedComunicacionServer) mustEmbedUnimplementedComunicacionServer() {}
func (UnimplementedComunicacionServer) testEmbeddedByValue()                      {}

// UnsafeComunicacionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComunicacionServer will
// result in compilation errors.
type UnsafeComunicacionServer interface {
	mustEmbedUnimplementedComunicacionServer()
}

func RegisterComunicacionServer(s grpc.ServiceRegistrar, srv ComunicacionServer) {
	// If the following call pancis, it indicates UnimplementedComunicacionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Comunicacion_ServiceDesc, srv)
}

func _Comunicacion_ConsultarListaPiratas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServer).ConsultarListaPiratas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comunicacion_ConsultarListaPiratas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServer).ConsultarListaPiratas(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunicacion_VenderPirataSubmundo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VentaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServer).VenderPirataSubmundo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comunicacion_VenderPirataSubmundo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServer).VenderPirataSubmundo(ctx, req.(*VentaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Comunicacion_VenderPirataMarina_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VentaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ComunicacionServer).VenderPirataMarina(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Comunicacion_VenderPirataMarina_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ComunicacionServer).VenderPirataMarina(ctx, req.(*VentaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Comunicacion_ServiceDesc is the grpc.ServiceDesc for Comunicacion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Comunicacion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "comunicacion.Comunicacion",
	HandlerType: (*ComunicacionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "consultarListaPiratas",
			Handler:    _Comunicacion_ConsultarListaPiratas_Handler,
		},
		{
			MethodName: "venderPirataSubmundo",
			Handler:    _Comunicacion_VenderPirataSubmundo_Handler,
		},
		{
			MethodName: "venderPirataMarina",
			Handler:    _Comunicacion_VenderPirataMarina_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comunicacion.proto",
}
